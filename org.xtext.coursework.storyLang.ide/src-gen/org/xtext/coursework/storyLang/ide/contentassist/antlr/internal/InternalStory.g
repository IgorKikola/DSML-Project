/*
 * generated by Xtext 2.30.0
 */
grammar InternalStory;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.coursework.storyLang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.coursework.storyLang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.coursework.storyLang.services.StoryGrammarAccess;

}
@parser::members {
	private StoryGrammarAccess grammarAccess;

	public void setGrammarAccess(StoryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStoryProgram
entryRuleStoryProgram
:
{ before(grammarAccess.getStoryProgramRule()); }
	 ruleStoryProgram
{ after(grammarAccess.getStoryProgramRule()); } 
	 EOF 
;

// Rule StoryProgram
ruleStoryProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoryProgramAccess().getStatementsAssignment()); }
		(rule__StoryProgram__StatementsAssignment)*
		{ after(grammarAccess.getStoryProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAmountStatement
entryRuleAmountStatement
:
{ before(grammarAccess.getAmountStatementRule()); }
	 ruleAmountStatement
{ after(grammarAccess.getAmountStatementRule()); } 
	 EOF 
;

// Rule AmountStatement
ruleAmountStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAmountStatementAccess().getGroup()); }
		(rule__AmountStatement__Group__0)
		{ after(grammarAccess.getAmountStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlaceStatement
entryRulePlaceStatement
:
{ before(grammarAccess.getPlaceStatementRule()); }
	 rulePlaceStatement
{ after(grammarAccess.getPlaceStatementRule()); } 
	 EOF 
;

// Rule PlaceStatement
rulePlaceStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlaceStatementAccess().getGroup()); }
		(rule__PlaceStatement__Group__0)
		{ after(grammarAccess.getPlaceStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePathStatement
entryRulePathStatement
:
{ before(grammarAccess.getPathStatementRule()); }
	 rulePathStatement
{ after(grammarAccess.getPathStatementRule()); } 
	 EOF 
;

// Rule PathStatement
rulePathStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathStatementAccess().getGroup()); }
		(rule__PathStatement__Group__0)
		{ after(grammarAccess.getPathStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveStatement
entryRuleMoveStatement
:
{ before(grammarAccess.getMoveStatementRule()); }
	 ruleMoveStatement
{ after(grammarAccess.getMoveStatementRule()); } 
	 EOF 
;

// Rule MoveStatement
ruleMoveStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveStatementAccess().getGroup()); }
		(rule__MoveStatement__Group__0)
		{ after(grammarAccess.getMoveStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNearbyStatement
entryRuleNearbyStatement
:
{ before(grammarAccess.getNearbyStatementRule()); }
	 ruleNearbyStatement
{ after(grammarAccess.getNearbyStatementRule()); } 
	 EOF 
;

// Rule NearbyStatement
ruleNearbyStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNearbyStatementAccess().getGroup()); }
		(rule__NearbyStatement__Group__0)
		{ after(grammarAccess.getNearbyStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubstanceStatement
entryRuleSubstanceStatement
:
{ before(grammarAccess.getSubstanceStatementRule()); }
	 ruleSubstanceStatement
{ after(grammarAccess.getSubstanceStatementRule()); } 
	 EOF 
;

// Rule SubstanceStatement
ruleSubstanceStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubstanceStatementAccess().getGroup()); }
		(rule__SubstanceStatement__Group__0)
		{ after(grammarAccess.getSubstanceStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoodStatement
entryRuleMoodStatement
:
{ before(grammarAccess.getMoodStatementRule()); }
	 ruleMoodStatement
{ after(grammarAccess.getMoodStatementRule()); } 
	 EOF 
;

// Rule MoodStatement
ruleMoodStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoodStatementAccess().getGroup()); }
		(rule__MoodStatement__Group__0)
		{ after(grammarAccess.getMoodStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPlaceStatementParserRuleCall_0()); }
		rulePlaceStatement
		{ after(grammarAccess.getStatementAccess().getPlaceStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPathStatementParserRuleCall_1()); }
		rulePathStatement
		{ after(grammarAccess.getStatementAccess().getPathStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getMoveStatementParserRuleCall_2()); }
		ruleMoveStatement
		{ after(grammarAccess.getStatementAccess().getMoveStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getNearbyStatementParserRuleCall_3()); }
		ruleNearbyStatement
		{ after(grammarAccess.getStatementAccess().getNearbyStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSubstanceStatementParserRuleCall_4()); }
		ruleSubstanceStatement
		{ after(grammarAccess.getStatementAccess().getSubstanceStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getMoodStatementParserRuleCall_5()); }
		ruleMoodStatement
		{ after(grammarAccess.getStatementAccess().getMoodStatementParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAmountStatementParserRuleCall_6()); }
		ruleAmountStatement
		{ after(grammarAccess.getStatementAccess().getAmountStatementParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AmountStatement__Group__0__Impl
	rule__AmountStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAmountStatementAccess().getAmountKeyword_0()); }
	'amount:'
	{ after(grammarAccess.getAmountStatementAccess().getAmountKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AmountStatement__Group__1__Impl
	rule__AmountStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAmountStatementAccess().getValueAssignment_1()); }
	(rule__AmountStatement__ValueAssignment_1)
	{ after(grammarAccess.getAmountStatementAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AmountStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAmountStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getAmountStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlaceStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlaceStatement__Group__0__Impl
	rule__PlaceStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlaceStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceStatementAccess().getPlaceKeyword_0()); }
	'place:'
	{ after(grammarAccess.getPlaceStatementAccess().getPlaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlaceStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlaceStatement__Group__1__Impl
	rule__PlaceStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlaceStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceStatementAccess().getValueAssignment_1()); }
	(rule__PlaceStatement__ValueAssignment_1)
	{ after(grammarAccess.getPlaceStatementAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlaceStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlaceStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlaceStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getPlaceStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathStatement__Group__0__Impl
	rule__PathStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathStatementAccess().getPathKeyword_0()); }
	'path:'
	{ after(grammarAccess.getPathStatementAccess().getPathKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathStatement__Group__1__Impl
	rule__PathStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathStatementAccess().getListAssignment_1()); }
	(rule__PathStatement__ListAssignment_1)
	{ after(grammarAccess.getPathStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathStatement__Group__2__Impl
	rule__PathStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathStatementAccess().getGroup_2()); }
	(rule__PathStatement__Group_2__0)*
	{ after(grammarAccess.getPathStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getPathStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathStatement__Group_2__0__Impl
	rule__PathStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getPathStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathStatementAccess().getListAssignment_2_1()); }
	(rule__PathStatement__ListAssignment_2_1)
	{ after(grammarAccess.getPathStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__0__Impl
	rule__MoveStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getMoveKeyword_0()); }
	'move:'
	{ after(grammarAccess.getMoveStatementAccess().getMoveKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__1__Impl
	rule__MoveStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getListAssignment_1()); }
	(rule__MoveStatement__ListAssignment_1)
	{ after(grammarAccess.getMoveStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__2__Impl
	rule__MoveStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getGroup_2()); }
	(rule__MoveStatement__Group_2__0)*
	{ after(grammarAccess.getMoveStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getMoveStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group_2__0__Impl
	rule__MoveStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getMoveStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getListAssignment_2_1()); }
	(rule__MoveStatement__ListAssignment_2_1)
	{ after(grammarAccess.getMoveStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NearbyStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NearbyStatement__Group__0__Impl
	rule__NearbyStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNearbyStatementAccess().getNearbyKeyword_0()); }
	'nearby:'
	{ after(grammarAccess.getNearbyStatementAccess().getNearbyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NearbyStatement__Group__1__Impl
	rule__NearbyStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNearbyStatementAccess().getListAssignment_1()); }
	(rule__NearbyStatement__ListAssignment_1)
	{ after(grammarAccess.getNearbyStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NearbyStatement__Group__2__Impl
	rule__NearbyStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNearbyStatementAccess().getGroup_2()); }
	(rule__NearbyStatement__Group_2__0)*
	{ after(grammarAccess.getNearbyStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NearbyStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNearbyStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getNearbyStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NearbyStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NearbyStatement__Group_2__0__Impl
	rule__NearbyStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNearbyStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getNearbyStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NearbyStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNearbyStatementAccess().getListAssignment_2_1()); }
	(rule__NearbyStatement__ListAssignment_2_1)
	{ after(grammarAccess.getNearbyStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubstanceStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubstanceStatement__Group__0__Impl
	rule__SubstanceStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstanceStatementAccess().getSubstanceKeyword_0()); }
	'substance:'
	{ after(grammarAccess.getSubstanceStatementAccess().getSubstanceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubstanceStatement__Group__1__Impl
	rule__SubstanceStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstanceStatementAccess().getListAssignment_1()); }
	(rule__SubstanceStatement__ListAssignment_1)
	{ after(grammarAccess.getSubstanceStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubstanceStatement__Group__2__Impl
	rule__SubstanceStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstanceStatementAccess().getGroup_2()); }
	(rule__SubstanceStatement__Group_2__0)*
	{ after(grammarAccess.getSubstanceStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubstanceStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstanceStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getSubstanceStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubstanceStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubstanceStatement__Group_2__0__Impl
	rule__SubstanceStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstanceStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSubstanceStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubstanceStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubstanceStatementAccess().getListAssignment_2_1()); }
	(rule__SubstanceStatement__ListAssignment_2_1)
	{ after(grammarAccess.getSubstanceStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoodStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoodStatement__Group__0__Impl
	rule__MoodStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoodStatementAccess().getMoodKeyword_0()); }
	'mood:'
	{ after(grammarAccess.getMoodStatementAccess().getMoodKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoodStatement__Group__1__Impl
	rule__MoodStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoodStatementAccess().getListAssignment_1()); }
	(rule__MoodStatement__ListAssignment_1)
	{ after(grammarAccess.getMoodStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoodStatement__Group__2__Impl
	rule__MoodStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoodStatementAccess().getGroup_2()); }
	(rule__MoodStatement__Group_2__0)*
	{ after(grammarAccess.getMoodStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoodStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoodStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getMoodStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoodStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoodStatement__Group_2__0__Impl
	rule__MoodStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoodStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getMoodStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoodStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoodStatementAccess().getListAssignment_2_1()); }
	(rule__MoodStatement__ListAssignment_2_1)
	{ after(grammarAccess.getMoodStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StoryProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getStoryProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AmountStatement__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAmountStatementAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAmountStatementAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlaceStatement__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlaceStatementAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPlaceStatementAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPathStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getPathStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMoveStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMoveStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNearbyStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNearbyStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NearbyStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNearbyStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNearbyStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstanceStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSubstanceStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubstanceStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubstanceStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSubstanceStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoodStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMoodStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoodStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoodStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMoodStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
