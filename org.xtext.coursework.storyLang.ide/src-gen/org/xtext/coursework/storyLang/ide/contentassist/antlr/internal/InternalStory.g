/*
 * generated by Xtext 2.25.0
 */
grammar InternalStory;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.coursework.storyLang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.coursework.storyLang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.coursework.storyLang.services.StoryGrammarAccess;

}
@parser::members {
	private StoryGrammarAccess grammarAccess;

	public void setGrammarAccess(StoryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStoryProgram
entryRuleStoryProgram
:
{ before(grammarAccess.getStoryProgramRule()); }
	 ruleStoryProgram
{ after(grammarAccess.getStoryProgramRule()); } 
	 EOF 
;

// Rule StoryProgram
ruleStoryProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoryProgramAccess().getStatementsAssignment()); }
		(rule__StoryProgram__StatementsAssignment)*
		{ after(grammarAccess.getStoryProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNameStatement
entryRuleNameStatement
:
{ before(grammarAccess.getNameStatementRule()); }
	 ruleNameStatement
{ after(grammarAccess.getNameStatementRule()); } 
	 EOF 
;

// Rule NameStatement
ruleNameStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameStatementAccess().getGroup()); }
		(rule__NameStatement__Group__0)
		{ after(grammarAccess.getNameStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEmotionStatement
entryRuleEmotionStatement
:
{ before(grammarAccess.getEmotionStatementRule()); }
	 ruleEmotionStatement
{ after(grammarAccess.getEmotionStatementRule()); } 
	 EOF 
;

// Rule EmotionStatement
ruleEmotionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmotionStatementAccess().getGroup()); }
		(rule__EmotionStatement__Group__0)
		{ after(grammarAccess.getEmotionStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerbStatement
entryRuleVerbStatement
:
{ before(grammarAccess.getVerbStatementRule()); }
	 ruleVerbStatement
{ after(grammarAccess.getVerbStatementRule()); } 
	 EOF 
;

// Rule VerbStatement
ruleVerbStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerbStatementAccess().getGroup()); }
		(rule__VerbStatement__Group__0)
		{ after(grammarAccess.getVerbStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdverbStatement
entryRuleAdverbStatement
:
{ before(grammarAccess.getAdverbStatementRule()); }
	 ruleAdverbStatement
{ after(grammarAccess.getAdverbStatementRule()); } 
	 EOF 
;

// Rule AdverbStatement
ruleAdverbStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdverbStatementAccess().getGroup()); }
		(rule__AdverbStatement__Group__0)
		{ after(grammarAccess.getAdverbStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLocationStatement
entryRuleLocationStatement
:
{ before(grammarAccess.getLocationStatementRule()); }
	 ruleLocationStatement
{ after(grammarAccess.getLocationStatementRule()); } 
	 EOF 
;

// Rule LocationStatement
ruleLocationStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLocationStatementAccess().getGroup()); }
		(rule__LocationStatement__Group__0)
		{ after(grammarAccess.getLocationStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdjectiveStatement
entryRuleAdjectiveStatement
:
{ before(grammarAccess.getAdjectiveStatementRule()); }
	 ruleAdjectiveStatement
{ after(grammarAccess.getAdjectiveStatementRule()); } 
	 EOF 
;

// Rule AdjectiveStatement
ruleAdjectiveStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdjectiveStatementAccess().getGroup()); }
		(rule__AdjectiveStatement__Group__0)
		{ after(grammarAccess.getAdjectiveStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getNameStatementParserRuleCall_0()); }
		ruleNameStatement
		{ after(grammarAccess.getStatementAccess().getNameStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getEmotionStatementParserRuleCall_1()); }
		ruleEmotionStatement
		{ after(grammarAccess.getStatementAccess().getEmotionStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVerbStatementParserRuleCall_2()); }
		ruleVerbStatement
		{ after(grammarAccess.getStatementAccess().getVerbStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAdverbStatementParserRuleCall_3()); }
		ruleAdverbStatement
		{ after(grammarAccess.getStatementAccess().getAdverbStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAdjectiveStatementParserRuleCall_4()); }
		ruleAdjectiveStatement
		{ after(grammarAccess.getStatementAccess().getAdjectiveStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLocationStatementParserRuleCall_5()); }
		ruleLocationStatement
		{ after(grammarAccess.getStatementAccess().getLocationStatementParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameStatement__Group__0__Impl
	rule__NameStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameStatementAccess().getNameKeyword_0()); }
	'name:'
	{ after(grammarAccess.getNameStatementAccess().getNameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameStatement__Group__1__Impl
	rule__NameStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameStatementAccess().getValueAssignment_1()); }
	(rule__NameStatement__ValueAssignment_1)
	{ after(grammarAccess.getNameStatementAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameStatementAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getNameStatementAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EmotionStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmotionStatement__Group__0__Impl
	rule__EmotionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmotionStatementAccess().getEmotionsKeyword_0()); }
	'emotions:'
	{ after(grammarAccess.getEmotionStatementAccess().getEmotionsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmotionStatement__Group__1__Impl
	rule__EmotionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmotionStatementAccess().getListAssignment_1()); }
	(rule__EmotionStatement__ListAssignment_1)
	{ after(grammarAccess.getEmotionStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmotionStatement__Group__2__Impl
	rule__EmotionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmotionStatementAccess().getGroup_2()); }
	(rule__EmotionStatement__Group_2__0)*
	{ after(grammarAccess.getEmotionStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmotionStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmotionStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getEmotionStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EmotionStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmotionStatement__Group_2__0__Impl
	rule__EmotionStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmotionStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getEmotionStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EmotionStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEmotionStatementAccess().getListAssignment_2_1()); }
	(rule__EmotionStatement__ListAssignment_2_1)
	{ after(grammarAccess.getEmotionStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VerbStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbStatement__Group__0__Impl
	rule__VerbStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbStatementAccess().getVerbKeyword_0()); }
	'verb:'
	{ after(grammarAccess.getVerbStatementAccess().getVerbKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbStatement__Group__1__Impl
	rule__VerbStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbStatementAccess().getListAssignment_1()); }
	(rule__VerbStatement__ListAssignment_1)
	{ after(grammarAccess.getVerbStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbStatement__Group__2__Impl
	rule__VerbStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbStatementAccess().getGroup_2()); }
	(rule__VerbStatement__Group_2__0)*
	{ after(grammarAccess.getVerbStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getVerbStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VerbStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbStatement__Group_2__0__Impl
	rule__VerbStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getVerbStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbStatementAccess().getListAssignment_2_1()); }
	(rule__VerbStatement__ListAssignment_2_1)
	{ after(grammarAccess.getVerbStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdverbStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdverbStatement__Group__0__Impl
	rule__AdverbStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdverbStatementAccess().getAdverbsKeyword_0()); }
	'adverbs:'
	{ after(grammarAccess.getAdverbStatementAccess().getAdverbsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdverbStatement__Group__1__Impl
	rule__AdverbStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdverbStatementAccess().getListAssignment_1()); }
	(rule__AdverbStatement__ListAssignment_1)
	{ after(grammarAccess.getAdverbStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdverbStatement__Group__2__Impl
	rule__AdverbStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdverbStatementAccess().getGroup_2()); }
	(rule__AdverbStatement__Group_2__0)*
	{ after(grammarAccess.getAdverbStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdverbStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdverbStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAdverbStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdverbStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdverbStatement__Group_2__0__Impl
	rule__AdverbStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdverbStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getAdverbStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdverbStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdverbStatementAccess().getListAssignment_2_1()); }
	(rule__AdverbStatement__ListAssignment_2_1)
	{ after(grammarAccess.getAdverbStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LocationStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocationStatement__Group__0__Impl
	rule__LocationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationStatementAccess().getLocationsKeyword_0()); }
	'locations:'
	{ after(grammarAccess.getLocationStatementAccess().getLocationsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocationStatement__Group__1__Impl
	rule__LocationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationStatementAccess().getListAssignment_1()); }
	(rule__LocationStatement__ListAssignment_1)
	{ after(grammarAccess.getLocationStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocationStatement__Group__2__Impl
	rule__LocationStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationStatementAccess().getGroup_2()); }
	(rule__LocationStatement__Group_2__0)*
	{ after(grammarAccess.getLocationStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocationStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getLocationStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LocationStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocationStatement__Group_2__0__Impl
	rule__LocationStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getLocationStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocationStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationStatementAccess().getListAssignment_2_1()); }
	(rule__LocationStatement__ListAssignment_2_1)
	{ after(grammarAccess.getLocationStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdjectiveStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdjectiveStatement__Group__0__Impl
	rule__AdjectiveStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdjectiveStatementAccess().getAdjectivesKeyword_0()); }
	'adjectives:'
	{ after(grammarAccess.getAdjectiveStatementAccess().getAdjectivesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdjectiveStatement__Group__1__Impl
	rule__AdjectiveStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdjectiveStatementAccess().getListAssignment_1()); }
	(rule__AdjectiveStatement__ListAssignment_1)
	{ after(grammarAccess.getAdjectiveStatementAccess().getListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdjectiveStatement__Group__2__Impl
	rule__AdjectiveStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdjectiveStatementAccess().getGroup_2()); }
	(rule__AdjectiveStatement__Group_2__0)*
	{ after(grammarAccess.getAdjectiveStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdjectiveStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdjectiveStatementAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAdjectiveStatementAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdjectiveStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdjectiveStatement__Group_2__0__Impl
	rule__AdjectiveStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdjectiveStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getAdjectiveStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdjectiveStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdjectiveStatementAccess().getListAssignment_2_1()); }
	(rule__AdjectiveStatement__ListAssignment_2_1)
	{ after(grammarAccess.getAdjectiveStatementAccess().getListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StoryProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getStoryProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameStatement__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameStatementAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNameStatementAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEmotionStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEmotionStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EmotionStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEmotionStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEmotionStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVerbStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVerbStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdverbStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAdverbStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdverbStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdverbStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAdverbStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocationStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLocationStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocationStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLocationStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__ListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdjectiveStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAdjectiveStatementAccess().getListSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdjectiveStatement__ListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdjectiveStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAdjectiveStatementAccess().getListSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
