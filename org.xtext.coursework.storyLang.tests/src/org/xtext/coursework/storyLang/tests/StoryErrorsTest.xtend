/*
 * generated by Xtext 2.25.0
 */
package org.xtext.coursework.storyLang.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.coursework.storyLang.story.StoryProgram
import org.junit.Assert
import org.junit.jupiter.api.DisplayName


@ExtendWith(InjectionExtension)
@InjectWith(StoryInjectorProvider)
class StoryErrorsTest {
	@Inject
	ParseHelper<StoryProgram> parseHelper = new ParseHelper<StoryProgram>();

	@Test
	@DisplayName("Test invalid place statement parsing")
	def void testInvalidPlaceParsing() {
		val String input = '''
			place: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid place statement parsing")
	def void testValidPlaceParsing() {
		val String input = '''
			place: "forest";
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test invalid move statement parsing")
	def void testInvalidMoveParsing() {
		val String input = '''
			move: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid move statement parsing")
	def void testValidMoveParsing() {
		val String input = '''
			move: "spiral", "twirl", "curl", "dance", "twine", "weave", "meander", "wander", "flow";
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test invalid substance statement parsing")
	def void testInvalidSubstanceParsing() {
		val String input = '''
			substance: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid substance statement parsing")
	def void testValidSubstanceParsing() {
		val String input = '''
			substance:"light", "reflections", "mist", "shadow", "darkness", "brightness", "gaiety", "merriment";
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test invalid mood statement parsing")
	def void testInvalidMoodParsing() {
		val String input = '''
			mood: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid mood statement parsing")
	def void testValidMoodParsing() {
		val String input = '''
			mood:"overcast", "alight", "clear", "darkened", "blue", "shadowed", "illuminated", "silver", "cool", "warm", "summer-warmed";
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test invalid nearby statement parsing")
	def void testInvalidNearbyParsing() {
		val String input = '''
			nearby: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid nearby statement parsing")
	def void testValidNearbyParsing() {
		val String input = '''
			nearby:"far away", "ahead", "behind me";
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test invalid path statement parsing")
	def void testInvalidPathParsing() {
		val String input = '''
			path: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid path statement parsing")
	def void testValidPathParsing() {
		val String input = '''
			path:"stream", "brook", "path", "ravine", "forest", "fence", "stone wall";
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test invalid amount statement parsing")
	def void testInvalidAmountParsing() {
		val String input = '''
			amount: ;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertFalse(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	@DisplayName("Test valid amount statement parsing")
	def void testValidAmountParsing() {
		val String input = '''
			amount: 10;
		'''
		val StoryProgram program = parseHelper.parse(input)
		Assert.assertNotNull(program)
		Assert.assertEquals(1, program.statements.size)
		val errors = program.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	
}
