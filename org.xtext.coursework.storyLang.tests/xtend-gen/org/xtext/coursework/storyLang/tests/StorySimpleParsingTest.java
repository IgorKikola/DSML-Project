/**
 * generated by Xtext 2.25.0
 */
package org.xtext.coursework.storyLang.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.coursework.storyLang.story.StoryProgram;

@ExtendWith(InjectionExtension.class)
@InjectWith(StoryInjectorProvider.class)
@SuppressWarnings("all")
public class StorySimpleParsingTest {
  @Inject
  private ParseHelper<StoryProgram> parseHelper = new ParseHelper<StoryProgram>();

  @Test
  @DisplayName("Test parsing all statements at once")
  public void testParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("place: \"forest\";");
      _builder.newLine();
      _builder.append("path: \"river\", \"bridge\", \"mountain\";");
      _builder.newLine();
      _builder.append("move: \"run\", \"climb\", \"jump\";");
      _builder.newLine();
      _builder.append("nearby: \"waterfall\", \"cave\";");
      _builder.newLine();
      _builder.append("substance: \"moss\", \"rocks\";");
      _builder.newLine();
      _builder.append("mood: \"excited\", \"nervous\";");
      _builder.newLine();
      _builder.append("amount: 3;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(7, program.getStatements().size());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid place statement parsing")
  public void testInvalidPlaceParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("place: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid place statement parsing")
  public void testValidPlaceParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("place: \"forest\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid move statement parsing")
  public void testInvalidMoveParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("move: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid move statement parsing")
  public void testValidMoveParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("move: \"spiral\", \"twirl\", \"curl\", \"dance\", \"twine\", \"weave\", \"meander\", \"wander\", \"flow\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid substance statement parsing")
  public void testInvalidSubstanceParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("substance: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid substance statement parsing")
  public void testValidSubstanceParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("substance:\"light\", \"reflections\", \"mist\", \"shadow\", \"darkness\", \"brightness\", \"gaiety\", \"merriment\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid mood statement parsing")
  public void testInvalidMoodParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("mood: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid mood statement parsing")
  public void testValidMoodParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("mood:\"overcast\", \"alight\", \"clear\", \"darkened\", \"blue\", \"shadowed\", \"illuminated\", \"silver\", \"cool\", \"warm\", \"summer-warmed\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid nearby statement parsing")
  public void testInvalidNearbyParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("nearby: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid nearby statement parsing")
  public void testValidNearbyParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("nearby:\"far away\", \"ahead\", \"behind me\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid path statement parsing")
  public void testInvalidPathParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("path: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid path statement parsing")
  public void testValidPathParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("path:\"stream\", \"brook\", \"path\", \"ravine\", \"forest\", \"fence\", \"stone wall\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test invalid amount statement parsing")
  public void testInvalidAmountParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("amount: ;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  @DisplayName("Test valid amount statement parsing")
  public void testValidAmountParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("amount: 10;");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
