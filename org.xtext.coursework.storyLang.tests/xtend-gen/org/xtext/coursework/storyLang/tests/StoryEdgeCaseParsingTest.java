/**
 * generated by Xtext 2.25.0
 */
package org.xtext.coursework.storyLang.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.coursework.storyLang.story.StoryProgram;

@ExtendWith(InjectionExtension.class)
@InjectWith(StoryInjectorProvider.class)
@SuppressWarnings("all")
public class StoryEdgeCaseParsingTest {
  @Inject
  private ParseHelper<StoryProgram> parseHelper = new ParseHelper<StoryProgram>();

  @Test
  @DisplayName("Test too many arguments for place statement parsing")
  public void testPlaceTooManyArgsParsing() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("move: \"dance\";");
      _builder.newLine();
      final String input = _builder.toString();
      final StoryProgram program = this.parseHelper.parse(input);
      Assert.assertNotNull(program);
      Assert.assertEquals(1, program.getStatements().size());
      final EList<Resource.Diagnostic> errors = program.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
