/*
 * generated by Xtext 2.25.0
 */
package org.xtext.coursework.storyLang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.coursework.storyLang.story.StoryProgram
import org.xtext.coursework.storyLang.story.NameStatement
import org.xtext.coursework.storyLang.story.EmotionStatement
import java.util.List
import java.util.ArrayList
import java.util.Random

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StoryGenerator extends AbstractGenerator {
	
	int test = 10;


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		

        val model = resource.contents.head as StoryProgram
        fsa.generateFile(resource.deriveTargetFileNameFor, model.doGenerateStats)
    }

    def deriveTargetFileNameFor(Resource resource) {
        resource.URI.appendFileExtension('txt').lastSegment
    }


    def String doGenerateStats(StoryProgram program) '''
        Program contains:

        - «program.statements.filter(NameStatement).iterator().next().value» name
        - «program.eAllContents.filter(EmotionStatement).toString» emotions
        
        
        - «
        
		
       	
        
        program.statements.filter(EmotionStatement).iterator.next.list.get(Math.floor(Math.random()*3).intValue())
        
        
        
        
        » emotions statement
      
    '''
	
	
	
	
}
