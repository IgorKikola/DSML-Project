/*
 * generated by Xtext 2.30.0
 */
grammar InternalStory;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.coursework.storyLang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.coursework.storyLang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.coursework.storyLang.services.StoryGrammarAccess;

}

@parser::members {

 	private StoryGrammarAccess grammarAccess;

    public InternalStoryParser(TokenStream input, StoryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "StoryProgram";
   	}

   	@Override
   	protected StoryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStoryProgram
entryRuleStoryProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryProgramRule()); }
	iv_ruleStoryProgram=ruleStoryProgram
	{ $current=$iv_ruleStoryProgram.current; }
	EOF;

// Rule StoryProgram
ruleStoryProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStoryProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStoryProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.xtext.coursework.storyLang.Story.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPlaceStatementParserRuleCall_0());
		}
		this_PlaceStatement_0=rulePlaceStatement
		{
			$current = $this_PlaceStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPathStatementParserRuleCall_1());
		}
		this_PathStatement_1=rulePathStatement
		{
			$current = $this_PathStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getMoveStatementParserRuleCall_2());
		}
		this_MoveStatement_2=ruleMoveStatement
		{
			$current = $this_MoveStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getNearbyStatementParserRuleCall_3());
		}
		this_NearbyStatement_3=ruleNearbyStatement
		{
			$current = $this_NearbyStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSubstanceStatementParserRuleCall_4());
		}
		this_SubstanceStatement_4=ruleSubstanceStatement
		{
			$current = $this_SubstanceStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getMoodStatementParserRuleCall_5());
		}
		this_MoodStatement_5=ruleMoodStatement
		{
			$current = $this_MoodStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAmountStatementParserRuleCall_6());
		}
		this_AmountStatement_6=ruleAmountStatement
		{
			$current = $this_AmountStatement_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAmountStatement
entryRuleAmountStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAmountStatementRule()); }
	iv_ruleAmountStatement=ruleAmountStatement
	{ $current=$iv_ruleAmountStatement.current; }
	EOF;

// Rule AmountStatement
ruleAmountStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='amount:'
		{
			newLeafNode(otherlv_0, grammarAccess.getAmountStatementAccess().getAmountKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getAmountStatementAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAmountStatementRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getAmountStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulePlaceStatement
entryRulePlaceStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaceStatementRule()); }
	iv_rulePlaceStatement=rulePlaceStatement
	{ $current=$iv_rulePlaceStatement.current; }
	EOF;

// Rule PlaceStatement
rulePlaceStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='place:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlaceStatementAccess().getPlaceKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getPlaceStatementAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPlaceStatementRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getPlaceStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulePathStatement
entryRulePathStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathStatementRule()); }
	iv_rulePathStatement=rulePathStatement
	{ $current=$iv_rulePathStatement.current; }
	EOF;

// Rule PathStatement
rulePathStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='path:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPathStatementAccess().getPathKeyword_0());
		}
		(
			(
				lv_list_1_0=RULE_STRING
				{
					newLeafNode(lv_list_1_0, grammarAccess.getPathStatementAccess().getListSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPathStatementRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getPathStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_list_3_0=RULE_STRING
					{
						newLeafNode(lv_list_3_0, grammarAccess.getPathStatementAccess().getListSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPathStatementRule());
						}
						addWithLastConsumed(
							$current,
							"list",
							lv_list_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getPathStatementAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleMoveStatement
entryRuleMoveStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveStatementRule()); }
	iv_ruleMoveStatement=ruleMoveStatement
	{ $current=$iv_ruleMoveStatement.current; }
	EOF;

// Rule MoveStatement
ruleMoveStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveStatementAccess().getMoveKeyword_0());
		}
		(
			(
				lv_list_1_0=RULE_STRING
				{
					newLeafNode(lv_list_1_0, grammarAccess.getMoveStatementAccess().getListSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveStatementRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getMoveStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_list_3_0=RULE_STRING
					{
						newLeafNode(lv_list_3_0, grammarAccess.getMoveStatementAccess().getListSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoveStatementRule());
						}
						addWithLastConsumed(
							$current,
							"list",
							lv_list_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getMoveStatementAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleNearbyStatement
entryRuleNearbyStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNearbyStatementRule()); }
	iv_ruleNearbyStatement=ruleNearbyStatement
	{ $current=$iv_ruleNearbyStatement.current; }
	EOF;

// Rule NearbyStatement
ruleNearbyStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='nearby:'
		{
			newLeafNode(otherlv_0, grammarAccess.getNearbyStatementAccess().getNearbyKeyword_0());
		}
		(
			(
				lv_list_1_0=RULE_STRING
				{
					newLeafNode(lv_list_1_0, grammarAccess.getNearbyStatementAccess().getListSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNearbyStatementRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getNearbyStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_list_3_0=RULE_STRING
					{
						newLeafNode(lv_list_3_0, grammarAccess.getNearbyStatementAccess().getListSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNearbyStatementRule());
						}
						addWithLastConsumed(
							$current,
							"list",
							lv_list_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getNearbyStatementAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleSubstanceStatement
entryRuleSubstanceStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstanceStatementRule()); }
	iv_ruleSubstanceStatement=ruleSubstanceStatement
	{ $current=$iv_ruleSubstanceStatement.current; }
	EOF;

// Rule SubstanceStatement
ruleSubstanceStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='substance:'
		{
			newLeafNode(otherlv_0, grammarAccess.getSubstanceStatementAccess().getSubstanceKeyword_0());
		}
		(
			(
				lv_list_1_0=RULE_STRING
				{
					newLeafNode(lv_list_1_0, grammarAccess.getSubstanceStatementAccess().getListSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubstanceStatementRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSubstanceStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_list_3_0=RULE_STRING
					{
						newLeafNode(lv_list_3_0, grammarAccess.getSubstanceStatementAccess().getListSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSubstanceStatementRule());
						}
						addWithLastConsumed(
							$current,
							"list",
							lv_list_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getSubstanceStatementAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleMoodStatement
entryRuleMoodStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoodStatementRule()); }
	iv_ruleMoodStatement=ruleMoodStatement
	{ $current=$iv_ruleMoodStatement.current; }
	EOF;

// Rule MoodStatement
ruleMoodStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mood:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoodStatementAccess().getMoodKeyword_0());
		}
		(
			(
				lv_list_1_0=RULE_STRING
				{
					newLeafNode(lv_list_1_0, grammarAccess.getMoodStatementAccess().getListSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoodStatementRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getMoodStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_list_3_0=RULE_STRING
					{
						newLeafNode(lv_list_3_0, grammarAccess.getMoodStatementAccess().getListSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoodStatementRule());
						}
						addWithLastConsumed(
							$current,
							"list",
							lv_list_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getMoodStatementAccess().getSemicolonKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
