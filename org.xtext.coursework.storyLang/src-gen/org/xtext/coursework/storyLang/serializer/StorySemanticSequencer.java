/*
 * generated by Xtext 2.30.0
 */
package org.xtext.coursework.storyLang.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.coursework.storyLang.services.StoryGrammarAccess;
import org.xtext.coursework.storyLang.story.EmotionStatement;
import org.xtext.coursework.storyLang.story.NameStatement;
import org.xtext.coursework.storyLang.story.StoryPackage;
import org.xtext.coursework.storyLang.story.StoryProgram;

@SuppressWarnings("all")
public class StorySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StoryGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StoryPackage.EMOTION_STATEMENT:
				sequence_EmotionStatement(context, (EmotionStatement) semanticObject); 
				return; 
			case StoryPackage.NAME_STATEMENT:
				sequence_NameStatement(context, (NameStatement) semanticObject); 
				return; 
			case StoryPackage.STORY_PROGRAM:
				sequence_StoryProgram(context, (StoryProgram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns EmotionStatement
	 *     EmotionStatement returns EmotionStatement
	 *
	 * Constraint:
	 *     (list+=STRING list+=STRING*)
	 * </pre>
	 */
	protected void sequence_EmotionStatement(ISerializationContext context, EmotionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns NameStatement
	 *     NameStatement returns NameStatement
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_NameStatement(ISerializationContext context, NameStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryPackage.Literals.NAME_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryPackage.Literals.NAME_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameStatementAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StoryProgram returns StoryProgram
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_StoryProgram(ISerializationContext context, StoryProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
