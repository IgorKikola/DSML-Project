/*
 * generated by Xtext 2.25.0
 */
package org.xtext.coursework.storyLang.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.coursework.storyLang.services.StoryGrammarAccess;
import org.xtext.coursework.storyLang.story.Adjectives;
import org.xtext.coursework.storyLang.story.Adverbs;
import org.xtext.coursework.storyLang.story.Name;
import org.xtext.coursework.storyLang.story.StoryPackage;
import org.xtext.coursework.storyLang.story.StoryProgram;
import org.xtext.coursework.storyLang.story.Verbs;

@SuppressWarnings("all")
public class StorySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StoryGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StoryPackage.ADJECTIVES:
				sequence_Adjectives(context, (Adjectives) semanticObject); 
				return; 
			case StoryPackage.ADVERBS:
				sequence_Adverbs(context, (Adverbs) semanticObject); 
				return; 
			case StoryPackage.NAME:
				sequence_Name(context, (Name) semanticObject); 
				return; 
			case StoryPackage.STORY_PROGRAM:
				sequence_StoryProgram(context, (StoryProgram) semanticObject); 
				return; 
			case StoryPackage.VERBS:
				sequence_Verbs(context, (Verbs) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Adjectives returns Adjectives
	 *
	 * Constraint:
	 *     adjectives=ID
	 */
	protected void sequence_Adjectives(ISerializationContext context, Adjectives semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryPackage.Literals.ADJECTIVES__ADJECTIVES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryPackage.Literals.ADJECTIVES__ADJECTIVES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdjectivesAccess().getAdjectivesIDTerminalRuleCall_0(), semanticObject.getAdjectives());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Adverbs returns Adverbs
	 *
	 * Constraint:
	 *     adverbs=ID
	 */
	protected void sequence_Adverbs(ISerializationContext context, Adverbs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryPackage.Literals.ADVERBS__ADVERBS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryPackage.Literals.ADVERBS__ADVERBS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdverbsAccess().getAdverbsIDTerminalRuleCall_0(), semanticObject.getAdverbs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Name
	 *     Name returns Name
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Name(ISerializationContext context, Name semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryPackage.Literals.NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryPackage.Literals.NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StoryProgram returns StoryProgram
	 *
	 * Constraint:
	 *     stories+=Statement+
	 */
	protected void sequence_StoryProgram(ISerializationContext context, StoryProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Verbs returns Verbs
	 *
	 * Constraint:
	 *     verbs='Walked'
	 */
	protected void sequence_Verbs(ISerializationContext context, Verbs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StoryPackage.Literals.VERBS__VERBS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StoryPackage.Literals.VERBS__VERBS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerbsAccess().getVerbsWalkedKeyword_0_0(), semanticObject.getVerbs());
		feeder.finish();
	}
	
	
}
