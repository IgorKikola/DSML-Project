/**
 * generated by Xtext 2.30.0
 */
package org.xtext.coursework.storyLang.story.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.coursework.storyLang.story.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StoryFactoryImpl extends EFactoryImpl implements StoryFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StoryFactory init()
  {
    try
    {
      StoryFactory theStoryFactory = (StoryFactory)EPackage.Registry.INSTANCE.getEFactory(StoryPackage.eNS_URI);
      if (theStoryFactory != null)
      {
        return theStoryFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StoryFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StoryFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StoryPackage.STORY_PROGRAM: return createStoryProgram();
      case StoryPackage.STATEMENT: return createStatement();
      case StoryPackage.NAME_STATEMENT: return createNameStatement();
      case StoryPackage.EMOTION_STATEMENT: return createEmotionStatement();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoryProgram createStoryProgram()
  {
    StoryProgramImpl storyProgram = new StoryProgramImpl();
    return storyProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NameStatement createNameStatement()
  {
    NameStatementImpl nameStatement = new NameStatementImpl();
    return nameStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmotionStatement createEmotionStatement()
  {
    EmotionStatementImpl emotionStatement = new EmotionStatementImpl();
    return emotionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StoryPackage getStoryPackage()
  {
    return (StoryPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StoryPackage getPackage()
  {
    return StoryPackage.eINSTANCE;
  }

} //StoryFactoryImpl
