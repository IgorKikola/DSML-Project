/*
 * generated by Xtext 2.30.0
 */
package org.xtext.coursework.storyLang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StoryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StoryProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.StoryProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//StoryProgram:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmotionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//    NameStatement |
		//    EmotionStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NameStatement |
		//EmotionStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameStatement
		public RuleCall getNameStatementParserRuleCall_0() { return cNameStatementParserRuleCall_0; }
		
		//EmotionStatement
		public RuleCall getEmotionStatementParserRuleCall_1() { return cEmotionStatementParserRuleCall_1; }
	}
	public class NameStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.NameStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NameStatement:
		//    'name:' value=STRING ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'name:' value=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'name:'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class EmotionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.EmotionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmotionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EmotionStatement:
		//    'emotions:' list+=STRING (',' list+=STRING )* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'emotions:' list+=STRING (',' list+=STRING )* ';'
		public Group getGroup() { return cGroup; }
		
		//'emotions:'
		public Keyword getEmotionsKeyword_0() { return cEmotionsKeyword_0; }
		
		//list+=STRING
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_1_0() { return cListSTRINGTerminalRuleCall_1_0; }
		
		//(',' list+=STRING )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=STRING
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_1_0() { return cListSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private final StoryProgramElements pStoryProgram;
	private final StatementElements pStatement;
	private final NameStatementElements pNameStatement;
	private final EmotionStatementElements pEmotionStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StoryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStoryProgram = new StoryProgramElements();
		this.pStatement = new StatementElements();
		this.pNameStatement = new NameStatementElements();
		this.pEmotionStatement = new EmotionStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.coursework.storyLang.Story".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StoryProgram:
	//    statements += Statement*
	//;
	public StoryProgramElements getStoryProgramAccess() {
		return pStoryProgram;
	}
	
	public ParserRule getStoryProgramRule() {
		return getStoryProgramAccess().getRule();
	}
	
	//Statement:
	//    NameStatement |
	//    EmotionStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//NameStatement:
	//    'name:' value=STRING ';'
	//;
	public NameStatementElements getNameStatementAccess() {
		return pNameStatement;
	}
	
	public ParserRule getNameStatementRule() {
		return getNameStatementAccess().getRule();
	}
	
	//EmotionStatement:
	//    'emotions:' list+=STRING (',' list+=STRING )* ';'
	//;
	public EmotionStatementElements getEmotionStatementAccess() {
		return pEmotionStatement;
	}
	
	public ParserRule getEmotionStatementRule() {
		return getEmotionStatementAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
