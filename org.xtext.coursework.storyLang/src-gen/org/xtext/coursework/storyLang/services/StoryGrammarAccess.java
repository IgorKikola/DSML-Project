/*
 * generated by Xtext 2.30.0
 */
package org.xtext.coursework.storyLang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StoryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StoryProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.StoryProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//StoryProgram:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlaceStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPathStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNearbyStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSubstanceStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMoodStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAmountStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//    PlaceStatement |
		//    PathStatement |
		//    MoveStatement |
		//    NearbyStatement |
		//    SubstanceStatement |
		//    MoodStatement |
		//    AmountStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlaceStatement |
		//PathStatement |
		//MoveStatement |
		//NearbyStatement |
		//SubstanceStatement |
		//MoodStatement |
		//AmountStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PlaceStatement
		public RuleCall getPlaceStatementParserRuleCall_0() { return cPlaceStatementParserRuleCall_0; }
		
		//PathStatement
		public RuleCall getPathStatementParserRuleCall_1() { return cPathStatementParserRuleCall_1; }
		
		//MoveStatement
		public RuleCall getMoveStatementParserRuleCall_2() { return cMoveStatementParserRuleCall_2; }
		
		//NearbyStatement
		public RuleCall getNearbyStatementParserRuleCall_3() { return cNearbyStatementParserRuleCall_3; }
		
		//SubstanceStatement
		public RuleCall getSubstanceStatementParserRuleCall_4() { return cSubstanceStatementParserRuleCall_4; }
		
		//MoodStatement
		public RuleCall getMoodStatementParserRuleCall_5() { return cMoodStatementParserRuleCall_5; }
		
		//AmountStatement
		public RuleCall getAmountStatementParserRuleCall_6() { return cAmountStatementParserRuleCall_6; }
	}
	public class AmountStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.AmountStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AmountStatement:
		//    'amount:' value=INT ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'amount:' value=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'amount:'
		public Keyword getAmountKeyword_0() { return cAmountKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PlaceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.PlaceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PlaceStatement:
		//    'place:' value=STRING ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'place:' value=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'place:'
		public Keyword getPlaceKeyword_0() { return cPlaceKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PathStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.PathStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PathStatement:
		//    'path:' list+=STRING (',' list+=STRING )* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'path:' list+=STRING (',' list+=STRING )* ';'
		public Group getGroup() { return cGroup; }
		
		//'path:'
		public Keyword getPathKeyword_0() { return cPathKeyword_0; }
		
		//list+=STRING
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_1_0() { return cListSTRINGTerminalRuleCall_1_0; }
		
		//(',' list+=STRING )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=STRING
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_1_0() { return cListSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MoveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.MoveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MoveStatement:
		//    'move:' list+=STRING (',' list+=STRING )* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'move:' list+=STRING (',' list+=STRING )* ';'
		public Group getGroup() { return cGroup; }
		
		//'move:'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//list+=STRING
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_1_0() { return cListSTRINGTerminalRuleCall_1_0; }
		
		//(',' list+=STRING )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=STRING
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_1_0() { return cListSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class NearbyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.NearbyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNearbyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NearbyStatement:
		//    'nearby:' list+=STRING (',' list+=STRING )* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'nearby:' list+=STRING (',' list+=STRING )* ';'
		public Group getGroup() { return cGroup; }
		
		//'nearby:'
		public Keyword getNearbyKeyword_0() { return cNearbyKeyword_0; }
		
		//list+=STRING
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_1_0() { return cListSTRINGTerminalRuleCall_1_0; }
		
		//(',' list+=STRING )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=STRING
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_1_0() { return cListSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class SubstanceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.SubstanceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubstanceStatement:
		//    'substance:' list+=STRING (',' list+=STRING )* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'substance:' list+=STRING (',' list+=STRING )* ';'
		public Group getGroup() { return cGroup; }
		
		//'substance:'
		public Keyword getSubstanceKeyword_0() { return cSubstanceKeyword_0; }
		
		//list+=STRING
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_1_0() { return cListSTRINGTerminalRuleCall_1_0; }
		
		//(',' list+=STRING )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=STRING
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_1_0() { return cListSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MoodStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.MoodStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MoodStatement:
		//    'mood:' list+=STRING (',' list+=STRING )* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mood:' list+=STRING (',' list+=STRING )* ';'
		public Group getGroup() { return cGroup; }
		
		//'mood:'
		public Keyword getMoodKeyword_0() { return cMoodKeyword_0; }
		
		//list+=STRING
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_1_0() { return cListSTRINGTerminalRuleCall_1_0; }
		
		//(',' list+=STRING )*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=STRING
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_1_0() { return cListSTRINGTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private final StoryProgramElements pStoryProgram;
	private final StatementElements pStatement;
	private final AmountStatementElements pAmountStatement;
	private final PlaceStatementElements pPlaceStatement;
	private final PathStatementElements pPathStatement;
	private final MoveStatementElements pMoveStatement;
	private final NearbyStatementElements pNearbyStatement;
	private final SubstanceStatementElements pSubstanceStatement;
	private final MoodStatementElements pMoodStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StoryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStoryProgram = new StoryProgramElements();
		this.pStatement = new StatementElements();
		this.pAmountStatement = new AmountStatementElements();
		this.pPlaceStatement = new PlaceStatementElements();
		this.pPathStatement = new PathStatementElements();
		this.pMoveStatement = new MoveStatementElements();
		this.pNearbyStatement = new NearbyStatementElements();
		this.pSubstanceStatement = new SubstanceStatementElements();
		this.pMoodStatement = new MoodStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.coursework.storyLang.Story".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StoryProgram:
	//    statements += Statement*
	//;
	public StoryProgramElements getStoryProgramAccess() {
		return pStoryProgram;
	}
	
	public ParserRule getStoryProgramRule() {
		return getStoryProgramAccess().getRule();
	}
	
	//Statement:
	//    PlaceStatement |
	//    PathStatement |
	//    MoveStatement |
	//    NearbyStatement |
	//    SubstanceStatement |
	//    MoodStatement |
	//    AmountStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AmountStatement:
	//    'amount:' value=INT ';'
	//;
	public AmountStatementElements getAmountStatementAccess() {
		return pAmountStatement;
	}
	
	public ParserRule getAmountStatementRule() {
		return getAmountStatementAccess().getRule();
	}
	
	//PlaceStatement:
	//    'place:' value=STRING ';'
	//;
	public PlaceStatementElements getPlaceStatementAccess() {
		return pPlaceStatement;
	}
	
	public ParserRule getPlaceStatementRule() {
		return getPlaceStatementAccess().getRule();
	}
	
	//PathStatement:
	//    'path:' list+=STRING (',' list+=STRING )* ';'
	//;
	public PathStatementElements getPathStatementAccess() {
		return pPathStatement;
	}
	
	public ParserRule getPathStatementRule() {
		return getPathStatementAccess().getRule();
	}
	
	//MoveStatement:
	//    'move:' list+=STRING (',' list+=STRING )* ';'
	//;
	public MoveStatementElements getMoveStatementAccess() {
		return pMoveStatement;
	}
	
	public ParserRule getMoveStatementRule() {
		return getMoveStatementAccess().getRule();
	}
	
	//NearbyStatement:
	//    'nearby:' list+=STRING (',' list+=STRING )* ';'
	//;
	public NearbyStatementElements getNearbyStatementAccess() {
		return pNearbyStatement;
	}
	
	public ParserRule getNearbyStatementRule() {
		return getNearbyStatementAccess().getRule();
	}
	
	//SubstanceStatement:
	//    'substance:' list+=STRING (',' list+=STRING )* ';'
	//;
	public SubstanceStatementElements getSubstanceStatementAccess() {
		return pSubstanceStatement;
	}
	
	public ParserRule getSubstanceStatementRule() {
		return getSubstanceStatementAccess().getRule();
	}
	
	//MoodStatement:
	//    'mood:' list+=STRING (',' list+=STRING )* ';'
	//;
	public MoodStatementElements getMoodStatementAccess() {
		return pMoodStatement;
	}
	
	public ParserRule getMoodStatementRule() {
		return getMoodStatementAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
