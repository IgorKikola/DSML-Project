/*
 * generated by Xtext 2.25.0
 */
package org.xtext.coursework.storyLang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StoryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StoryProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.StoryProgram");
		private final Assignment cStoriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStoriesStatementParserRuleCall_0 = (RuleCall)cStoriesAssignment.eContents().get(0);
		
		//StoryProgram:
		//    stories+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//stories+=Statement*
		public Assignment getStoriesAssignment() { return cStoriesAssignment; }
		
		//Statement
		public RuleCall getStoriesStatementParserRuleCall_0() { return cStoriesStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Statement");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//    Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Name:
		//    'Hello' name=ID '!'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Hello' name=ID '!'
		public Group getGroup() { return cGroup; }
		
		//'Hello'
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	public class VerbsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Verbs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVerbsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cVerbsWalkedKeyword_0_0 = (Keyword)cVerbsAssignment_0.eContents().get(0);
		private final Keyword cRanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Verbs:
		//    verbs= 'Walked' | 'Ran'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//verbs= 'Walked' | 'Ran'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//verbs= 'Walked'
		public Assignment getVerbsAssignment_0() { return cVerbsAssignment_0; }
		
		//'Walked'
		public Keyword getVerbsWalkedKeyword_0_0() { return cVerbsWalkedKeyword_0_0; }
		
		//'Ran'
		public Keyword getRanKeyword_1() { return cRanKeyword_1; }
	}
	public class AdjectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Adjectives");
		private final Assignment cAdjectivesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAdjectivesIDTerminalRuleCall_0 = (RuleCall)cAdjectivesAssignment.eContents().get(0);
		
		//Adjectives:
		//    adjectives=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//adjectives=ID
		public Assignment getAdjectivesAssignment() { return cAdjectivesAssignment; }
		
		//ID
		public RuleCall getAdjectivesIDTerminalRuleCall_0() { return cAdjectivesIDTerminalRuleCall_0; }
	}
	public class AdverbsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coursework.storyLang.Story.Adverbs");
		private final Assignment cAdverbsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAdverbsIDTerminalRuleCall_0 = (RuleCall)cAdverbsAssignment.eContents().get(0);
		
		//Adverbs:
		//    adverbs=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//adverbs=ID
		public Assignment getAdverbsAssignment() { return cAdverbsAssignment; }
		
		//ID
		public RuleCall getAdverbsIDTerminalRuleCall_0() { return cAdverbsIDTerminalRuleCall_0; }
	}
	
	
	private final StoryProgramElements pStoryProgram;
	private final StatementElements pStatement;
	private final NameElements pName;
	private final VerbsElements pVerbs;
	private final AdjectivesElements pAdjectives;
	private final AdverbsElements pAdverbs;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StoryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStoryProgram = new StoryProgramElements();
		this.pStatement = new StatementElements();
		this.pName = new NameElements();
		this.pVerbs = new VerbsElements();
		this.pAdjectives = new AdjectivesElements();
		this.pAdverbs = new AdverbsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.coursework.storyLang.Story".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StoryProgram:
	//    stories+=Statement*;
	public StoryProgramElements getStoryProgramAccess() {
		return pStoryProgram;
	}
	
	public ParserRule getStoryProgramRule() {
		return getStoryProgramAccess().getRule();
	}
	
	//Statement:
	//    Name
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Name:
	//    'Hello' name=ID '!'
	//;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Verbs:
	//    verbs= 'Walked' | 'Ran'
	//;
	public VerbsElements getVerbsAccess() {
		return pVerbs;
	}
	
	public ParserRule getVerbsRule() {
		return getVerbsAccess().getRule();
	}
	
	//Adjectives:
	//    adjectives=ID
	//;
	public AdjectivesElements getAdjectivesAccess() {
		return pAdjectives;
	}
	
	public ParserRule getAdjectivesRule() {
		return getAdjectivesAccess().getRule();
	}
	
	//Adverbs:
	//    adverbs=ID
	//;
	public AdverbsElements getAdverbsAccess() {
		return pAdverbs;
	}
	
	public ParserRule getAdverbsRule() {
		return getAdverbsAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
